package com.example.demo;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@SpringBootApplication
@EnableAsync
@EnableTransactionManagement
public class ProjectbackApplication {

    private static final Logger logger = LoggerFactory.getLogger(ProjectbackApplication.class);

    public static void main(String[] args) {
        try {
            // Configurar propiedades del sistema antes del arranque
            configureSystemProperties();
            
            // Iniciar la aplicaci√≥n Spring Boot
            ConfigurableApplicationContext context = SpringApplication.run(ProjectbackApplication.class, args);
            
            // Verificar que el contexto se inici√≥ correctamente
            if (context.isActive()) {
                logSuccessfulStartup();
            } else {
                logger.error("‚ùå El contexto de Spring no est√° activo");
                System.exit(1);
            }
            
        } catch (IllegalStateException e) {
            logger.error("‚ùå Error de configuraci√≥n o estado de la aplicaci√≥n: {}", e.getMessage());
            System.err.println("‚ùå Error de configuraci√≥n. Revisa application.properties y que el puerto 8080 est√© libre");
            System.exit(1);
        } catch (IllegalArgumentException e) {
            logger.error("‚ùå Error en argumentos de configuraci√≥n: {}", e.getMessage());
            System.err.println("‚ùå Error en par√°metros de configuraci√≥n de la aplicaci√≥n");
            System.exit(1);
        } catch (RuntimeException e) {
            logger.error("‚ùå Error de runtime iniciando la aplicaci√≥n: {}", e.getMessage(), e);
            System.err.println("‚ùå Error iniciando la aplicaci√≥n: " + e.getMessage());
            System.exit(1);
        } catch (Error e) {
            logger.error("‚ùå Error cr√≠tico del sistema: {}", e.getMessage(), e);
            System.err.println("‚ùå Error cr√≠tico del sistema: " + e.getMessage());
            System.exit(1);
        }
    }

    /**
     * Configura propiedades del sistema antes del arranque
     */
    private static void configureSystemProperties() {
        // Configurar timezone por defecto si no est√° configurado
        if (System.getProperty("user.timezone") == null) {
            System.setProperty("user.timezone", "America/Bogota");
        }
        
        // Configurar encoding por defecto
        if (System.getProperty("file.encoding") == null) {
            System.setProperty("file.encoding", "UTF-8");
        }
        
        // Deshabilitar banner de Spring Boot en logs de error
        System.setProperty("spring.main.banner-mode", "console");
    }

    private static void logSuccessfulStartup() {
        logger.info("=================================");
        logger.info("üöÄ Servidor Spring Boot iniciado correctamente");
        logger.info("üì° API disponible en: http://localhost:8080/api");
        logger.info("üîç Endpoints principales:");
        logger.info("   - GET /api/detections/test");
        logger.info("   - GET /api/detections/health");
        logger.info("   - GET /api/detections/count");
        logger.info("   - GET /api/detections/volume/total");
        logger.info("   - GET /api/detections/volume/by-lane");
        logger.info("   - GET /api/detections/patterns/hourly");
        logger.info("   - GET /api/detections/lanes/speed");
        logger.info("   - GET /api/detections/analysis/summary");
        logger.info("   - POST /api/detections/load-json");
        logger.info("üß™ Prueba la API con: http://localhost:8080/api/detections/test");
        logger.info("=================================");
        

}}